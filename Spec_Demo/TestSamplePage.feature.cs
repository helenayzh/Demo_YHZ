// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using TechTalk.SpecRun;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;

namespace Spec_Demo
{
    using TechTalk.SpecFlow;
    
    
    [GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [CompilerGeneratedAttribute()]
    [FeatureAttribute("TestSamplePage", Description="\tDo testing on a webpage(Helen Zheng)", SourceFile="TestSamplePage.feature", SourceLine=0)]
    public partial class TestSamplePageFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TestSamplePage.feature"
#line hidden
        
        [FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TestRunnerManager.GetTestRunner();
            FeatureInfo featureInfo = new FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TestSamplePage", "\tDo testing on a webpage(Helen Zheng)", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [ScenarioAttribute("Add a to-do item", new string[] {
                "mytag"}, SourceLine=4)]
        public virtual void AddATo_DoItem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a to-do item", new string[] {
                        "mytag"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("I have opened the sample page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.And("I have add a new to-do item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.Then("the item should be in the to-do list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
